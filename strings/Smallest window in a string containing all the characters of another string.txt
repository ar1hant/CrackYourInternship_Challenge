// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution
{
    public:
    //Function to find the smallest window in the string s consisting
    //of all the characters of string p.
    string smallestWindow (string s, string p)
    {
        int n = s.length();
        int m = p.length();
        if(p.length() > s.length())
            return "-1";
        unordered_map<char, int> mp;
        for(int i = 0;i < p.length();i++)
            mp[p[i]]++;
        int size = mp.size();
        int i = 0, j = 0, mx = n, l = 0;
        bool flag = 0;
        while(j < s.length()){
            if(mp.find(s[j]) != mp.end()){
                if(--mp[s[j]] == 0)
                    size--;
            }
            while(!size){
                flag = 1;
                if(mx > j - i + 1){
                    mx = j - i + 1;
                    l = i;
                }
                if(mp.find(s[i]) != mp.end()){
                    if(++mp[s[i]] > 0)
                        size++;
                }
                i++;
            }
            j++;
        }
        if(flag)
            return s.substr(l, mx);
        else
            return "-1";
    }
};

// { Driver Code Starts.
int main()
 {
    int t;
    cin>>t;
    while(t--)
    {
        string s;
        cin>>s;
        string pat;
        cin>>pat;
        Solution obj;
        cout<<obj.smallestWindow(s, pat)<<endl;
        
    }
	return 0;
}  // } Driver Code Ends